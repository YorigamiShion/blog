<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>制作自己的spring-boot-starter</title>
    <link href="/blog/2021/06/24/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84spring-boot-starter/"/>
    <url>/blog/2021/06/24/%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84spring-boot-starter/</url>
    
    <content type="html"><![CDATA[<p>编写spring服务时，除了用到官方提供的starter(例如spring-boot-starter-aop)以外，还会用到一些第三方提供的(例如mybatis-spring-boot-starter)。这一篇就将讲述如果制作打包一份自定义的spring-boot-starter，其中包含条件装配和@Enable模式的装配。</p><span id="more"></span><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>俗话说，计算机科学有两大难题：命名和缓存失效，起一个好名字对于自定义的包来说非常重要。在springboot推荐的命名规范中，官方提供的starter命名为spring-boot-starter-xxx，而第三方提供的命名为yyy-spring-boot-starter，这里就将项目命名为<code>demo-spring-boot-starter</code>。</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>新建maven项目，只依赖一个spring boot starter即可，内容为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.home<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建2个接口作为2种自动装配的对外内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DemoConditionalService</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">getValue</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">DemoEnableService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getResult</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="spring-boot自动装配"><a href="#spring-boot自动装配" class="headerlink" title="spring boot自动装配"></a>spring boot自动装配</h2><p>spring boot中提供了一系列的自动装配bean，为很多组件所需的bean提供了一个默认值，这些作为默认值的bean之上有很多@Conditional类的注解，其中一个是<code>@ConditionalOnMissingBean</code>，这个注解是最好理解的，当它和<code>@Bean</code>放在一起的时候，仅会在缺失这个bean的情况下将被指定bean加入到spring容器之中，这样就完成了为bean提供默认值的逻辑。</p><p>另一类有代表性的便是@Enable系列，例如<code>@EnableCaching</code>会自动载入spring-cache的相关bean，<code>@EnableAspectJAutoProxy</code>会根据参数来选择载入jdk proxy的bean还是cglib的bean。这种是通过注解显式地载入了对应的功能。</p><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><p><code>@Conditional</code>可以作为元注解，也就是加在注解上的注解，例如<code>@ConditionalOnMissingBean</code>；或者直接使用。这个注解可以被放置在<code>@Configuration</code>类上或者<code>@Bean</code>方法上，根据其指定的<code>Condition</code>接口的实现，来决定是否载入被注解的配置类或者bean方法。</p><h3 id="ConditionalOnMissingBean"><a href="#ConditionalOnMissingBean" class="headerlink" title="@ConditionalOnMissingBean"></a>@ConditionalOnMissingBean</h3><p>当指定的Bean不存在时进行载入逻辑。这里为<code>DemoConditionalService</code>提供了一个默认值，当其他途径都没有提供bean的实现时就会载入当前的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnMissingBean</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DemoConditionalService <span class="hljs-title">defaultDemoConditionalService</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> () -&gt; <span class="hljs-string">&quot;missing&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ConditionalOnProperty"><a href="#ConditionalOnProperty" class="headerlink" title="@ConditionalOnProperty"></a>@ConditionalOnProperty</h3><p>当指定的配置(<code>application.yml</code>或者<code>-Dkey=value</code>)符合条件时进行载入，这里根据demo.value的值为one或者two时载入实现，当demo.value不存在时载入two的实现，当demo.value存在且不是以上两个值时不载入任何一个，而是采用默认实现返回missing。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConditionalOnProperty(name = &quot;demo.value&quot;, havingValue = &quot;one&quot;)</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DemoConditionalService <span class="hljs-title">defaultDemoConditionalService</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> () -&gt; <span class="hljs-string">&quot;oneone&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@ConditionalOnProperty(name = &quot;demo.value&quot;, havingValue = &quot;two&quot;, matchIfMissing = true)</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> DemoConditionalService <span class="hljs-title">defaultDemoConditionalService</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> () -&gt; <span class="hljs-string">&quot;twotwo&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="引入自动装配"><a href="#引入自动装配" class="headerlink" title="引入自动装配"></a>引入自动装配</h3><p>将以上三个方法放在同一个配置类中，命名为<code>org.home.demo.spring.boot.starter.DemoConfiguration</code>。在<code>resources/META-INF</code>中新建文件<code>spring.factories</code>(这个由<code>SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION</code>硬编码)，文件内容为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.EnableAutoConfiguration=\<br>org<span class="hljs-selector-class">.home</span><span class="hljs-selector-class">.demo</span><span class="hljs-selector-class">.spring</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.starter</span>.DemoConfiguration<br></code></pre></td></tr></table></figure><p>这是spirng设计的一种spi扩展机制，和java的<code>ServiceLoader</code>、dubbo的扩展机制类似可以由spring自动地读取并载入相应的配置类，从而达到减少了用户的心智负担。</p><h2 id="enable方式载入"><a href="#enable方式载入" class="headerlink" title="enable方式载入"></a>enable方式载入</h2><p>注解的命名为<code>@EnableDemoService</code>，有一个int属性value，这个值乘以10作为<code>DemoEnableService</code>的结果。</p><p>通常这类enable注解都会带有一个<code>@Import</code>注解，可以import一个配置类或者import一个<code>ImportBeanDefinitionRegistrar</code>实现用于动态注册bean等等。这里采用<code>ImportBeanDefinitionRegistrar</code>是因为需要取到注解中的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-meta">@Import(EnableDemoServiceRegistrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableDemoService &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 1</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EnableDemoServiceRegistrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ImportBeanDefinitionRegistrar</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> value = importingClassMetadata.getAnnotations().get(EnableDemoService.class).getInt(<span class="hljs-string">&quot;value&quot;</span>);<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">10</span> * value;<br>        BeanDefinition bd = <span class="hljs-keyword">new</span> RootBeanDefinition(DemoEnableService.class, () -&gt; () -&gt; result);<br>        registry.registerBeanDefinition(<span class="hljs-string">&quot;demoEnableService&quot;</span>, bd);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>AnnotationMetadata</code>是spring提供的获取配置类元数据的接口，spring的注解中有很多<code>@AliasFor</code>作为等价别名，这个接口取到的信息会对这些进行处理。获得注解的值之后，通过<code>BeanDefinition</code>动态地注册一个bean的实现。这样就达成了根据注解值的不同载入不同实现的效果。</p><h2 id="最后工作"><a href="#最后工作" class="headerlink" title="最后工作"></a>最后工作</h2><p>执行<code>mvn install</code>安装到本地仓库，在其他的spring项目中引入<code>org.home:demo-spring-boot-starter</code>即可享受自动装配的魅力了。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>应用</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运行时创建final类的动态代理</title>
    <link href="/blog/2021/06/14/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%9B%E5%BB%BAfinal%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/blog/2021/06/14/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%9B%E5%BB%BAfinal%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>众所周知，jdk动态代理只能代理实现，而cglib代理需要创建对应类的子类因此不能代理final类。</p><p>那么有没有办法强行创建final类的子类呢？如果创建了会有什么后果？</p><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>AdoptOpenJDK 1.8, spring boot 2.4.5, spring-boot-starter-aop, spring-boot-starter-test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IBase</span> </span>&#123;<br>    <span class="hljs-function">String <span class="hljs-title">func</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Base</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IBase</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;From Base.class&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalBase</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IBase</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;From FinalBase.class&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代理非final类"><a href="#代理非final类" class="headerlink" title="代理非final类"></a>代理非final类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> MethodInterceptor mi = iv -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;func&quot;</span>.equals(iv.getMethod().getName())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;From Proxy&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> iv.proceed();<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">proxyBase</span><span class="hljs-params">()</span> </span>&#123;<br>    Base target = <span class="hljs-keyword">new</span> Base();<br>    ProxyFactory factory = <span class="hljs-keyword">new</span> ProxyFactory(target);<br>    factory.setProxyTargetClass(<span class="hljs-keyword">true</span>);<br>    factory.addAdvice(mi);<br>    Base proxy = (Base) factory.getProxy();<br><br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, ((IBase) proxy).func());<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, proxy.func())<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, IBase.class.getMethod(<span class="hljs-string">&quot;func&quot;</span>).invoke(proxy));;<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, Base.class.getMethod(<span class="hljs-string">&quot;func&quot;</span>).invoke(proxy));<br>&#125;<br></code></pre></td></tr></table></figure><p>结果符合预期，无论是静态调用还是反射动态调用都成功走了动态代理的逻辑。</p><h2 id="代理final类"><a href="#代理final类" class="headerlink" title="代理final类"></a>代理final类</h2><h3 id="生成子类时抛出异常"><a href="#生成子类时抛出异常" class="headerlink" title="生成子类时抛出异常"></a>生成子类时抛出异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">proxyFinalBase</span><span class="hljs-params">()</span> </span>&#123;<br>    FinalBase target = <span class="hljs-keyword">new</span> FinalBase();<br>    ProxyFactory factory = <span class="hljs-keyword">new</span> ProxyFactory(target);<br>    factory.setProxyTargetClass(<span class="hljs-keyword">true</span>);<br>    factory.addAdvice(mi);<br>    FinalBase proxy = (FinalBase) factory.getProxy();<br>&#125;<br></code></pre></td></tr></table></figure><p>出现异常如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Caused by: java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.IllegalArgumentException</span>: Cannot subclass final class demo<span class="hljs-selector-class">.FinalBase</span><br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.proxy</span><span class="hljs-selector-class">.Enhancer</span><span class="hljs-selector-class">.generateClass</span>(Enhancer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">660</span>)<br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.DefaultGeneratorStrategy</span><span class="hljs-selector-class">.generate</span>(DefaultGeneratorStrategy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">25</span>)<br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.ClassLoaderAwareGeneratorStrategy</span><span class="hljs-selector-class">.generate</span>(ClassLoaderAwareGeneratorStrategy<span class="hljs-selector-class">.java</span>:<span class="hljs-number">39</span>)<br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.core</span><span class="hljs-selector-class">.AbstractClassGenerator</span><span class="hljs-selector-class">.generate</span>(AbstractClassGenerator<span class="hljs-selector-class">.java</span>:<span class="hljs-number">358</span>)<br>at org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cglib</span><span class="hljs-selector-class">.proxy</span><span class="hljs-selector-class">.Enhancer</span><span class="hljs-selector-class">.generate</span>(Enhancer<span class="hljs-selector-class">.java</span>:<span class="hljs-number">585</span>)<br>    ......<br></code></pre></td></tr></table></figure><p>在 <code>TypeUtils.isFinal(sc.getModifiers())</code> 中因为检测到class的modifiers含有final标识抛出了这个异常。而modifiers的判断是通过查询target对象中klass指针指向的对象偏移一定字节后的某一位决定的，这就需要了解java对象和klass对象的结构。</p><h3 id="java对象和klass结构"><a href="#java对象和klass结构" class="headerlink" title="java对象和klass结构"></a>java对象和klass结构</h3><h4 id="java引用类型对象"><a href="#java引用类型对象" class="headerlink" title="java引用类型对象"></a>java引用类型对象</h4><p>对于非数组对象，指向地址的前8个字节为MarkWord，之后4/8个字节(根据是否开启指针压缩)为klass指针，而class对象的modifiers就在klass指针指向的对象之中。</p><h4 id="klass结构"><a href="#klass结构" class="headerlink" title="klass结构"></a>klass结构</h4><table><thead><tr><th>Index</th><th>Field Name</th><th>Size</th><th>Offset</th><th>Field Type</th></tr></thead><tbody><tr><td>1</td><td>Header</td><td>8</td><td>+0</td><td>Unknown</td></tr><tr><td>2</td><td>Klass</td><td>Pointer Size</td><td>+8</td><td><code>*Klass</code> to java/lang/Class</td></tr><tr><td>3</td><td>C++ Vtbl</td><td>Pointer Size</td><td>+16</td><td>Unknown Pointer</td></tr><tr><td>4</td><td>Layout Helper</td><td>4</td><td>+24</td><td>i32</td></tr><tr><td>5</td><td>Super Offset</td><td>4</td><td>+28</td><td>u32</td></tr><tr><td>6</td><td>Name</td><td>Pointer Size</td><td>+32</td><td><code>*Symbol</code> (linked list type?)</td></tr><tr><td>7</td><td>Secondary Super Cache</td><td>Pointer Size</td><td>+40</td><td><code>*Klass</code></td></tr><tr><td>8</td><td>Secondary Supers</td><td>Pointer Size</td><td>+48</td><td><code>Array&lt;*Klass&gt;</code></td></tr><tr><td>9</td><td>Primary Supers</td><td>Pointer Size * 8</td><td>+56</td><td><code>*Klass[]</code></td></tr><tr><td>10</td><td>Java Mirror</td><td>Pointer Size</td><td>+120</td><td><code>oop</code> (pointer type, representation of this class’s <code>java/lang/Class</code> instance)</td></tr><tr><td>11</td><td>Super</td><td>Pointer Size</td><td>+128</td><td><code>*Klass</code></td></tr><tr><td>12</td><td>First Subclass</td><td>Pointer Size</td><td>+126</td><td><code>*Klass</code> or <code>NULL</code></td></tr><tr><td>13</td><td>Sibling</td><td>Pointer Size</td><td>+144</td><td><code>*Klass</code> for linked list</td></tr><tr><td>14</td><td>Modifiers</td><td>4</td><td>+152</td><td>i32</td></tr><tr><td>15</td><td>Access Flags</td><td>4</td><td>+156</td><td>u32</td></tr></tbody></table><h3 id="通过Unsafe修改内存移除final修饰后"><a href="#通过Unsafe修改内存移除final修饰后" class="headerlink" title="通过Unsafe修改内存移除final修饰后"></a>通过Unsafe修改内存移除final修饰后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">proxyFinalBase</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 先通过反射获取unsafe实例。</span><br>    Field theUnsafe = Unsafe.class.getDeclaredField(<span class="hljs-string">&quot;theUnsafe&quot;</span>);<br>    theUnsafe.setAccessible(<span class="hljs-keyword">true</span>);<br>    Unsafe unsafe = (Unsafe) theUnsafe.get(<span class="hljs-keyword">null</span>);<br><br><br>    FinalBase target = <span class="hljs-keyword">new</span> FinalBase();<br>    <span class="hljs-comment">// 从target对象起始位置偏移8字节开始读取一个int，得到压缩后的klass指针值，左移3位得到实际的地址</span><br>    <span class="hljs-keyword">long</span> klassPtr = ((<span class="hljs-keyword">long</span>) unsafe.getInt(target, <span class="hljs-number">8L</span>)) &lt;&lt; <span class="hljs-number">3</span>;<br>    <span class="hljs-comment">// 修改Modifiers </span><br>    unsafe.putInt(klassPtr + <span class="hljs-number">152</span>, unsafe.getInt(klassPtr + <span class="hljs-number">152</span>) &amp; ~Modifier.FINAL);<br>    <span class="hljs-comment">// 修改Access Flags，ClassLoader.defineClass方法会检测这里</span><br>    unsafe.putInt(klassPtr + <span class="hljs-number">156</span>, unsafe.getInt(klassPtr + <span class="hljs-number">156</span>) &amp; ~Modifier.FINAL);<br><br>    ProxyFactory factory = <span class="hljs-keyword">new</span> ProxyFactory(target);<br>    factory.setProxyTargetClass(<span class="hljs-keyword">true</span>);<br>    factory.addAdvice(mi);<br>    FinalBase proxy = (FinalBase) factory.getProxy();<br><br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, ((IBase) proxy).func());<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From FinalBase.class&quot;</span>, proxy.func())<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From Proxy&quot;</span>, IBase.class.getMethod(<span class="hljs-string">&quot;func&quot;</span>).invoke(proxy));;<br>    Assertions.assertEquals(<span class="hljs-string">&quot;From FinalBase.class&quot;</span>, FinalBase.class.getMethod(<span class="hljs-string">&quot;func&quot;</span>).invoke(proxy));<br>&#125;<br></code></pre></td></tr></table></figure><p>通过修改内存后的确是可以生成子类了，但是这里出现了一个很神奇的现象：根据proxy对象的静态类型不同，为IBase时的直接和反射调用都触发了动态代理逻辑，而以FinalBase为静态类型时都是没有触发动态代理逻辑的。这涉及到了jvm字节码和多态性的具体实现。</p><h2 id="jvm字节码和多态"><a href="#jvm字节码和多态" class="headerlink" title="jvm字节码和多态"></a>jvm字节码和多态</h2><h3 id="方法调用的字节码"><a href="#方法调用的字节码" class="headerlink" title="方法调用的字节码"></a>方法调用的字节码</h3><p>在jvm中，方法调用对应的字节码有一下几种：</p><ul><li><strong>invokespecial</strong> 调用构造方法、private方法和super方法，直接跳转对应方法地址</li><li><strong>invokevirtual</strong> 调用一个class对象除了invokespecial的部分以外的所有方法，动态分发，最常用</li><li><strong>invokeinterface</strong> 调用接口的方法，动态分发</li><li><strong>invokestatic</strong> 调用静态方法</li><li><strong>invokedymatic</strong> 一般用于lambda表达式</li></ul><h3 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h3><p>和c++不同，java默认所有方法都是带有virtual的(当然virtual private方法是没意义的)，而实现方式也大体上一致，分为itable和itable两种。</p><p><strong>itable</strong> 记录了一个class对象实现的每一个接口和实现这个接口的实际方法的地址。储存结构类似于<code>&#123;interface:&#123;method:address,...&#125;,...&#125;</code>，会根据静态代码中的接口类型去查找当前对象所实现的方法地址。</p><p><strong>vtable</strong> 实现方式和c++没什么差别，每当一个class对象构造时，会把<code>&#123;method:address,...&#125;</code>覆盖到他基类的储存结构中，在多层级继承的情况下，相应的方法层次覆盖，在调用时再去查找这个方法的实际地址。</p><h3 id="例子中的问题"><a href="#例子中的问题" class="headerlink" title="例子中的问题"></a>例子中的问题</h3><p>HotSpot VM的静态分析会观察到final class，尽管FinalBase对象的方法调用字节码是<code>INVOKEVIRTUAL demo/FinalBase.func ()Ljava/lang/String;</code>，但实际上会采用一个名为fast_invokevfinal的内部字节码，这个不需要查vtable获取方法地址而是直接跳转调用。所以当proxy对象的静态类型是FinalBase时，jvm会忽略proxy对象的实际方法也就是动态代理的地址，而是会让程序跳转到FinalBase中定义的方法，也就是导致了例子中的情况。</p><p>而当proxy对象的静态类型时IBase时，方法调用的字节码是<code>INVOKEINTERFACE demo/IBase.func ()Ljava/lang/String; (itf)</code>，查找了实际方法地址，也就触发了动态代理的逻辑，输出了修改后的结果。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>只是突发奇想试着继承一下final class，结果牵扯出那么多东西。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>研究</tag>
      
      <tag>java</tag>
      
      <tag>cglib</tag>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今天开始写博客</title>
    <link href="/blog/2021/06/13/%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/"/>
    <url>/blog/2021/06/13/%E4%BB%8A%E5%A4%A9%E5%BC%80%E5%A7%8B%E5%86%99%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>记录一下码农生涯中的形形色色的问题和研究，顺带学习一下hexo的用法。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
